The solution usually involves carefully merging your custom Babel configuration with Expo's default settings.  Avoid overriding presets or plugins that Expo relies on.  Here's an example `babel.config.js` that might resolve the conflict by using `expo-prebuilt` to ensure your environment is compatible with Expo's.
```javascript
module.exports = function (api) {
  api.cache(true);
  return {
    presets: ['module:metro-react-native-babel-preset', 'expo-prebuilt'],
    plugins: [
      // Add your custom plugins here, ensuring they don't conflict with Expo's plugins
      ['@babel/plugin-proposal-decorators', { legacy: true }],
      ['@babel/plugin-transform-runtime', {
        corejs: 3,
        helpers: true,
        regenerator: true,
        useESModules: true
      }],
    ],
  };
};
```

Another approach is to carefully examine the error messages generated by the build failure. These messages often point to the specific conflict between your custom configuration and Expo's defaults.  Addressing the conflict directly—by removing redundant plugins, ensuring versions align, or modifying plugin options—can resolve the issue.  Consult Expo documentation and community forums to assist in handling these issues.